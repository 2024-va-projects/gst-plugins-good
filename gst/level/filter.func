/*
static void inline
gst_level_fast_16bit_chain (gint16 * in, guint num, gint channels,
    gint resolution, double *CS, double *peak)
*/

/* process one (interleaved) channel of incoming samples
 * calculate square sum of samples
 * normalize and average over number of samples
 * returns a normalized average power value as CS, as a double between 0 and 1
 * also returns the normalized peak power (square of the highest amplitude)
 *
 * caller must assure num is a multiple of channels
 * samples for multiple channels are interleaved
 * input sample data enters in *in_data as 8 or 16 bit data
 * this filter only accepts signed audio data, so mid level is always 0
 */
{
  register int j;
  double squaresum = 0.0;         /* square sum of the integer samples */
  register double square = 0.0;	  /* Square */
  register double PSS = 0.0;	  /* Peak Square Sample */
  double normalizer;              /* divisor to get a [-1, - 1] range */

  *CS = 0.0;                      /* Cumulative Square for this block */

  normalizer = (double) (1 << resolution);

  for (j = 0; j < num; j += channels)
  {
    square = ((double) in[j]) * in[j];
    if (square > PSS) PSS = square;
    squaresum += square;
  }
  *peak = PSS / (normalizer * normalizer);
  
  *CS = squaresum / (normalizer * normalizer);
}
